{"name":"posts","total":6,"result":[{"title":"PWA con Ionic3 y Workbox en 2 patadas.","draft":false,"date":"2018-05-01T00:00:00.000Z","description":"PWA con ionic 3","author":"Fernando González","tags":["pwa","ionic3","workbox"],"contents":"<p>En 2 sencillos pasos vamos a crear una aplicación web progresiva partiendo de un proyecto en ionic 3. Usaremos Workbox ya que ofrece muchas posibilidades.</p>\n<!-- more -->\n<p>Para este artículo vamos a partir de un proyecto de ionic 3 ya creado. Puedes crearte uno facilmente con ionic-cli:</p>\n<pre><code class=\"hljs\">ionic <span class=\"hljs-built_in\">start</span> ionic3-pwa-workbox blank</code></pre>\n\n<h2 id=\"primera-patada-activar-el-service-worker\">Primera patada: Activar el service worker</h2>\n<p>Para este paso vamos al fichero <code>./src/index.html</code> y descomentamos el siguiente código:</p>\n<pre><code class=\"hljs\">&lt;script&gt;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'serviceWorker'</span> <span class=\"hljs-keyword\">in</span> navigator) {\n      navigator.serviceWorker.register(<span class=\"hljs-string\">'service-worker.js'</span>)\n        .<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'service worker installed'</span>))\n        .<span class=\"hljs-keyword\">catch</span>(err =&gt; <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'Error'</span>, err));\n    }\n&lt;/script&gt;</code></pre>\n\n<p>Desde este momento ya tenemos el service worker activo con lo que ciertas rutas estarán cacheadas. Podemos verlo si lanzamos <code>ìonic serve</code> y vamos a la consola:</p>\n<p><img src=\"/images/2018/05/pwa-ionic3-workbox-1.png\" alt=\"service worker installed\" title=\"service worker installed\"></p>\n<h2 id=\"segunda-patada-usar-workbox\">Segunda patada: usar Workbox</h2>\n<p>primero vamos a instalar workbox con npm:</p>\n<pre><code class=\"hljs\">npm <span class=\"hljs-tag\">i</span> workbox-sw --save</code></pre>\n\n<p>Y ahora vamos a indicar a ionic que nos copie este fichero al hacer el build extendiendo la configuración por defecto. Crearemos un fichero al que lamaremos <code>/config/copy.config.js</code> con el siguiente contenido:</p>\n<pre><code class=\"hljs\"><span class=\"xml\">module.exports = </span><span class=\"hljs-expression\">{\n  <span class=\"hljs-variable\">copyWorkboxSw</span>: {\n    <span class=\"hljs-variable\">src</span>: ['<span class=\"hljs-end-block\">/node</span>_<span class=\"hljs-variable\">modules</span><span class=\"hljs-end-block\">/workbox-sw</span><span class=\"hljs-end-block\">/build</span><span class=\"hljs-end-block\">/workbox-sw.js</span>'],\n    <span class=\"hljs-variable\">dest</span>: ''\n  }</span><span class=\"xml\">\n}</span></code></pre>\n\n<p>Indicaremos en <code>package.json</code> el siguiente codigo para indicarle a ionic que tambien use la configuración que hemos creado:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-string\">\"config\"</span>: {\n    <span class=\"hljs-string\">\"ionic_copy\"</span>: <span class=\"hljs-string\">\"./config/copy.config.js\"</span>\n  }</code></pre>\n\n<p>Y modificaremos el service worker creado por ionic en nuestro proyecto por uno usando Workbox:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-pi\">'use strict'</span>;\nimportScripts(<span class=\"hljs-string\">'./build/workbox-sw.js'</span>);\n\n<span class=\"hljs-comment\">/*\nThis is our code to cache static files.\n*/</span>\nself.workbox.precaching.precacheAndRoute([\n    <span class=\"hljs-string\">'./build/main.js'</span>,\n    <span class=\"hljs-string\">'./build/vendor.js'</span>,\n    <span class=\"hljs-string\">'./build/main.css'</span>,\n    <span class=\"hljs-string\">'./build/polyfills.js'</span>,\n    <span class=\"hljs-string\">'index.html'</span>,\n    <span class=\"hljs-string\">'manifest.json'</span>\n    ]\n);</code></pre>\n\n<h2 id=\"para-terminar-patapum-pariba-y-test-con-lighthouse-\">Para terminar: patapum pariba y test con Lighthouse.</h2>\n<p>Para este artículo voy a usar gh-pages pero cualquier otro hosting que ofrezcan https sería valido.</p>\n<p>Mediante los siguientes comandos construiremos la aplicación para subirla a producción.</p>\n<pre><code class=\"hljs\">ionic cordova <span class=\"hljs-built_in\">platform</span> <span class=\"hljs-built_in\">add</span> browser\nionic cordova build browser <span class=\"hljs-comment\">--prod</span></code></pre>\n\n<p>Ahora tendremos nuestra aplicación en  <code>./platforms/browser/www/</code> asi que subiremos este directorio a nuestra rama gh-pages (recuerda usar tu nombre de usuario y tu repositorio en github):</p>\n<pre><code class=\"hljs\">cd platforms<span class=\"hljs-regexp\">/browser/</span>www/\ngit init\ngit remote add origin <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//github.com/frnd/ionic3-pwa-workbox.git</span>\ngit add --all\ngit commit -m <span class=\"hljs-string\">\"production build\"</span>\ngit push origin <span class=\"hljs-string\">master:</span>gh-pages -f</code></pre>\n\n<p>Nuestra PWA está disponible en <a href=\"https://frnd.github.io/ionic3-pwa-workbox/\">https://frnd.github.io/ionic3-pwa-workbox/</a>. \nEn la siguiente captura puedes ver los resultados que da Lighthouse.</p>\n<p><img src=\"/images/2018/05/pwa-ionic3-workbox-2.png\" alt=\"Resultados Lighthouse\" title=\"Resultados Lighthouse\"></p>\n<h2 id=\"codigo-fuente-y-enlaces-\">Codigo fuente y enlaces.</h2>\n<p>Puedes ver el codigo fuente de este proyecto en <a href=\"https://github.com/frnd/ionic3-pwa-workbox\">github</a> y acceder al \nejemplo <a href=\"https://frnd.github.io/ionic3-pwa-workbox/\">ionic3-pwa-workbox</a>. Mas información de interés:</p>\n<ul>\n<li><a href=\"https://ionicframework.com/\">ionic</a></li>\n<li><a href=\"https://developers.google.com/web/progressive-web-apps/\">Progressive Web Apps</a></li>\n<li><a href=\"https://developers.google.com/web/tools/workbox/#get-started\">Workbox</a></li>\n</ul>\n<p>Para problemas o comentarios, puedes crear un tema en el <a href=\"https://github.com/frnd/ionic3-pwa-workbox/issues/new\">github del proyecto</a></p>\n","cover":{"src":"/images/2018/05/pwa-ionic3-workbox-1.png","alt":"service worker installed","title":"service worker installed"},"path":"blog/pwa-con-ionic3-y-workbox-en-2-patadas","excerpt":"En 2 sencillos pasos vamos a crear una aplicación web progresiva partiendo de un proyecto en ionic 3. Usaremos Workbox ya que ofrece muchas posibilidades."},{"title":"NodeJS-Express: Agrupar mensajes en los logs mediante ID único","date":"2015-09-28T00:00:00.000Z","author":"Fernando González","tags":["uuid","trace","logs","request","express","nodejs","winston"],"contents":"<p>Extension de NodeJS-Express para trazar mensajes de logs agrupando todos los provenientes de la misma request mediante un identificador único.</p>\n<!-- more -->\n<p>Recientemente, en un proyecto personal en NodeJs, me encontré con la necesidad de trazar logs agrupando todos los mensajes provenientes de la misma request. Buscando, vi varias alternativas pero necesitaba incluir varias dependencias que al final no encajaban del todo bien.</p>\n<p>Como solo necesitaba una excusa para crear mi primera extensión para nodejs, pues me puse manos a la obra. El resultado <a href=\"https://github.com/frnd/winston-express-logger\">winston-express-logger</a>  </p>\n<p>Este paquete es un ‘middleware’ para Express que crea un logger de Winston en el objeto request, que si lo usamos añadirá a los metadatos propios de la llamada a log los siguientes:</p>\n<ul>\n<li>requesId: identificador único para cada request.</li>\n<li>method: El método HTTP usado en la llamada</li>\n<li>url: la URL a la que se dirige la petición</li>\n<li>ip: dirección ip origen de la petición</li>\n<li>userAgent: navegador que ha realizado la petición.</li>\n</ul>\n<p>De momento está en fase beta y le faltan por completar algunos de los tests, pero ya puedes usarlo en tu proyecto:</p>\n<p>Para instalarlo:</p>\n<pre><code class=\"hljs sh\">$ npm install --save https://github.com/frnd/winston-express-logger.git</code></pre>\n\n<p>En la inicialización de express:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> winston = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston'</span>);\n<span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">var</span> winstonExpressLogger = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'winston-express-logger'</span>);\n\n<span class=\"hljs-comment\">// Initialize express app</span>\n<span class=\"hljs-keyword\">var</span> app = express();\n\n<span class=\"hljs-comment\">// Add the request logger.</span>\napp.use(winstonExpressLogger.create(logger));</code></pre>\n\n<p>A partir de ahora en el objeto request de express tendrás un atributo log que será un logger de Winston, pudiéndolo usar de la siguiente forma:</p>\n<pre><code class=\"hljs js\">exports.controller = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(req, res)</span> </span>{\n    [...]\n    req.logger.info(<span class=\"hljs-string\">'Doing something'</span>);\n    [...]\n}</code></pre>\n\n<p>Que generará un mensaje en el log de la siguiente forma:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-number\">2015</span>-<span class=\"hljs-number\">09</span>-<span class=\"hljs-number\">28</span>T21:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">52</span>.<span class=\"hljs-number\">064</span>Z - info: <span class=\"hljs-type\">Doing</span> something <span class=\"hljs-keyword\">method</span>=<span class=\"hljs-type\">GET</span>, url=/api/doing, ip=<span class=\"hljs-number\">127</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>, userAgent=<span class=\"hljs-type\">Chrome</span> <span class=\"hljs-number\">46</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">2490</span> / <span class=\"hljs-type\">Linux</span> <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>, requestId=<span class=\"hljs-number\">7</span>a91efe1-e851-<span class=\"hljs-number\">421</span>c-b86a-f1cb2c3f2d25</code></pre>","path":"blog/nodejs-express-agrupar-mensajes-en-los-logs-mediante-id-nico","excerpt":"Extension de NodeJS-Express para trazar mensajes de logs agrupando todos los provenientes de la misma request mediante un identificador único."},{"title":"Generación de código fuente con Maven.","draft":false,"date":"2011-06-23T00:00:00.000Z","description":"Maven","author":"Fernando González","tags":["maven","code","template"],"contents":"<p>En este artículo veremos como mediante la capacidad de filtrado de archivos de Maven podremos generar clases java que posteriormente se compilará formando parte del proyecto como si fuera un fichero de código normal.</p>\n<!-- more -->\n<p>Este articulo requiere una serie de conocimientos sobre Maven. Para más información puedes visitar la <a href=\"http://maven.apache.org/\">página del proyecto de Maven</a>.</p>\n<p>Como ejemplo útil vamos a generar una clase con la información del nombre de proyecto y la versión que se han indicado en el fichero POM que luego podremos usar en nuestro código normal y así conseguir que ajustando la configuración\nestándar de Maven, automáticamente estos cambios queden presentes en el código fuente.</p>\n<h2 id=\"estructura-de-directorios\">Estructura de directorios</h2>\n<p>La estructura de directorios del proyecto sera como la de cualquier proyecto Maven solo que con una carpeta añadida para contener los ficheros con las plantillas para los fuentes generados.</p>\n<pre><code>.\n├── pom.xml\n└── src\n    └── main\n        ├── java\n        │   └── es\n        │       └── excelsit\n        │           └── sourceGenerationExample\n        │               └── ClaseNormal.java\n        └── source-templates\n            └── es\n                └── excelsit\n                    └── sourcesGenerationExample\n                        └── Version.java\n</code></pre><p>En la línea número 10 del listado de directorios anterior vemos una carpeta llamada source-template. Esta será la carpeta que contendrá las plantillas.</p>\n<h2 id=\"configuraci-n-de-maven\">Configuración de Maven</h2>\n<p>Para que Maven se entere de la existencia de esta carpeta hay que configurarlo en el POM.</p>\n<pre><code>&lt;resources&gt;\n  [...]\n  &lt;resource&gt;\n    &lt;directory&gt;src/main/source-templates&lt;/directory&gt;\n    &lt;filtering&gt;true&lt;/filtering&gt;\n    &lt;targetPath&gt;../generated-sources/filtering&lt;/targetPath&gt;\n  &lt;/resource&gt;\n  [...]\n&lt;/resources&gt;\n</code></pre><p>Mediante el código anterior incluiremos una carpeta de recursos que usará el filtrado de propiedades de Maven y que el resultado se copiará en la carpeta <code>/target/generated-sources/filtering</code>. Para el elemento <code>targetPath</code> hay que tener en cuenta que la ruta es relativa al directorio de compilación (más información sobre la estructura de directorios estandar de Maven) y que por defecto en el la generación de codigo se realiza dentro del directorio <code>/target/generated-sources/NOMBRE_PLUGIN</code></p>\n<p>El próximo paso es indicarle al plugin de compilación que existe un nuevo directorio con fuentes que también debe tener en cuenta.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">plugins</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">plugin</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.codehaus.mojo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>build-helper-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">executions</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">execution</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">id</span>&gt;</span>add-source<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">id</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">phase</span>&gt;</span>generate-sources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">phase</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">goals</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">goal</span>&gt;</span>add-source<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">goal</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">goals</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">configuration</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">sources</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">source</span>&gt;</span>${basedir}/target/generated-sources/filtering<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">source</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">sources</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">configuration</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">execution</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">executions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">plugin</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">plugins</span>&gt;</span></code></pre>\n\n<p>De la línea 12 a la 16 vemos la parte de configuración del plugin de compilación de Maven donde le hemos indicado una nueva carpeta con fuentes.</p>\n<h2 id=\"proyecto-de-ejemplo-\">Proyecto de ejemplo.</h2>\n<p>Para que tengais una visión de como quedaría el proyecto aquí tenéis el ejemplo sobre <a href=\"/uploads/2011/06/23/srcgen.zip\">generación de código mediante el filtrado de Maven</a> completo. Para ver el resultado podeis usar el siguiente comando:</p>\n<pre><code>mvn -Dexec.classpathScope=runtime &quot;-Dexec.args=-classpath %classpath es.frnd.srcgen.ClaseNormal&quot; -Dexec.executable=java process-classes org.codehaus.mojo:exec-maven-plugin:1.2:exec\n</code></pre>","path":"blog/generaci-n-de-c-digo-fuente-con-maven","excerpt":"En este artículo veremos como mediante la capacidad de filtrado de archivos de Maven podremos generar clases java que posteriormente se compilará formando parte del proyecto como si fuera un fichero de código normal."},{"title":"Creación de una plantilla para proyecto con Maven.","draft":false,"date":"2011-04-09T00:00:00.000Z","description":"Maven","author":"Fernando González","tags":["archetype","java","maven","platilla","proyecto"],"contents":"<p>Archetype: una plantilla para crear rapidamente la estructura de tu proyecto.</p>\n<!-- more -->\n<p>Maven es una herramienta muy útil para la gestión de proyectos. Facilita la gestión de dependencias del proyecto, pruebas unitarias, integración continua. Está basado en un sistema de plugins que ofrece la posibilidad de extender Maven para realizar cualquier tipo de tarea. En este artículo vamos a ver como se puede usar esta herramienta para generar una plantilla para acelerar el desarrollo de nuevos proyectos.</p>\n<p>Como ya hemos dicho, Maven es una herramienta para compilar y gestionar proyectos.  Es muy usada en proyectos Java, aunque es genérica y podría ser usada para cualquier lenguaje. Está basada en que el proyecto tiene una estructura de directorios específica que veremos posteriormente, aunque es totalmente configurable.</p>\n<h2 id=\"creaci-n-de-una-plantilla-vac-a-\">Creación de una plantilla vacía.</h2>\n<p>Una plantilla para Maven tiene la siguiente estructura:</p>\n<pre><code>archetype\n|-- pom.xml\n`-- src\n    `-- main\n        `-- resources\n            |-- META-INF\n            |   `-- maven\n            |       `--archetype.xml ó archetype-metadata.xml\n            `-- archetype-resources\n                |-- pom.xml\n                `-- src\n                    |-- main\n                    |   `-- java\n                    `-- test\n                        `-- java\n</code></pre><p>Como puedes ver, sigue la estructura de cualquier proyecto Maven. Hay varios ficheros que hay que tener en cuenta:</p>\n<ul>\n<li>pom.xml en el directorio raíz se encuentra el fichero POM con la información para gestionar el proyecto para generar la plantilla.</li>\n<li>pom.xml: Será el POM del proyecto que se genere usando la plantilla que estamos creando. Podemos decir que el contenido de la carpeta archetype-resources será el contenido del proyecto que generemos con esta platilla.</li>\n<li>archetype.xml ó archetype-metadata.xml: Describe los ficheros que contendrá el proyecto que se genere con esta plantilla. El primero (archetype.xml) es para la versión 1 del plugin, mientras que el segundo (archetype-metadata.xml) se usa en la versión 2 o superiores.</li>\n</ul>\n<p>En el directorio archetype-resources estarán los ficheros que contendrá el proyecto que generemos con esta plantilla.</p>\n<p>En el directorio archetype-resources estarán los ficheros que contendrá el proyecto que generemos con esta plantilla.</p>\n<p>Puedes crear esa estructura a mano, pero es más sencillo usar el <a href=\"http://maven.apache.org/plugins/maven-archetype-plugin/usage.html\" title=\"maven-archetype-plugin\">plugin Archetype</a> que te permite crear esa estructura sin esfuerzo. Para esto usaremos el siguiente comando:</p>\n<pre><code>mvn archetype:generate\n</code></pre><h2 id=\"creaci-n-de-una-plantilla-bas-ndose-en-un-proyecto-existente-\">Creación de una plantilla basándose en un proyecto existente.</h2>\n<p>Si ya tienes un proyecto sobre el que quieras crear un modelo para poder generar proyectos similares puedes ejecutar el siguiente comando:</p>\n<pre><code>mvn archetype:create-from-project\n</code></pre><p>Una vez que Maven haya finalizado su ejecución, en la carpeta target/generated-source tendrás la plantilla para tu proyecto con los ficheros pom.xml, archetype.xml y archetype-metadata.xml generados de forma automática.</p>\n<p>Es posible que necesites realizar alguna modificación en los ficheros para adaptar mejor la plantilla a tus necesidades. Por ejemplo:</p>\n<ul>\n<li>Organizar el código en un paquete</li>\n<li>Definir variables en el contenido del fichero para adaptar ciertos nombres a tus necesidades.</li>\n<li>Personalizar los nombres de ficheros según unas variables.</li>\n</ul>\n<h2 id=\"organizar-los-ficheros-en-paquetes\">Organizar los ficheros en paquetes</h2>\n<p>Dentro del fichero archetype-metadata.xml encontraremos una serie de descriptores de los directorios en los que se compone nuestro proyecto. Un ejemplo sería:</p>\n  <pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">fileSet</span> <span class=\"hljs-attribute\">filtered</span>=<span class=\"hljs-value\">\"true\"</span> <span class=\"hljs-attribute\">packaged</span>=<span class=\"hljs-value\">\"true\"</span> <span class=\"hljs-attribute\">encoding</span>=<span class=\"hljs-value\">\"UTF-8\"</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">directory</span>&gt;</span>src/main/java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">directory</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">includes</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">include</span>&gt;</span>**/*.java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">include</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">includes</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">fileSet</span>&gt;</span></code></pre>\n\n<p>Como vemos es bastante descriptivo, pero vamos a explicar la parte que nos interesa.  En el elemento fileSet vemos el atributo packaged=”true”, mediante este atributo indicamos a maven que al prosesar el contenido de ese directorio use una estructura de paquetes. Si por ejemplo, el contenido de ese directorio es</p>\n<pre><code>src/main/java\n          |-- common\n          |    `-- Objeto.java\n          |-- servicio\n                `-- Objeto.java\n</code></pre><p>en el proyecto resultado estará dentro de una estructura de paquetes indicado mediante la variable ${package}. Si por ejemplo el contenido de esta variable es es.excelsit.miProyecto el resultado sería:</p>\n<pre><code>src/main/java\n    es\n    `--excelsit\n        `-- miProyecto\n              |-- common\n              |   `-- Objeto1.java\n              |-- servicio\n                  `-- Objeto2.java\n</code></pre><p>El fichero para la clase Objeto1 y Objeto2 deberá contener la instrucción package es.excelsit.miProyecto;. Para ello usaremos la siguiente sintaxis para la definición del paquete:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-package\"><span class=\"hljs-keyword\">package</span> ${</span><span class=\"hljs-package\"><span class=\"hljs-keyword\">package</span>};</span></code></pre>\n\n<h2 id=\"uso-de-variables-en-la-plantilla-\">Uso de variables en la plantilla.</h2>\n<p>Si abrimos alguno de los ficheros de nuestra plantilla veremos que todos comienzan con algo asi:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-id\">#set</span> ( <span class=\"hljs-variable\">$symbol_pound</span> = <span class=\"hljs-string\">'#'</span> )\n<span class=\"hljs-id\">#set</span> ( <span class=\"hljs-variable\">$symbol_dollar</span> = <span class=\"hljs-string\">'$'</span> )\n<span class=\"hljs-id\">#set</span> ( <span class=\"hljs-variable\">$symbol_escape</span> = <span class=\"hljs-string\">'\\' )</span></code></pre>\n\n<p>Como vemos por su sintaxis, el plugin usa de forma interna <a href=\"http://velocity.apache.org/engine/devel/translations/user-guide_es.html\">Velocity</a> para la generación y adaptación de los ficheros de nuestra platilla de proyecto. Esto nos permite mucha libertad a la hora de crear el contenido del fichero. Hay que tener en cuenta que como  los símbolos almoadilla (#), dolar ($) y barra invertida (\\) son caracteres especiales, si los queremos usar deberemos hacerlo mediante sus variables <code>$symbol_pound</code>, <code>$symbol_dollar</code> y <code>$symbol_escape</code> correspondientes.</p>\n<h3 id=\"a-adir-propiedades-propias-\">Añadir propiedades propias.</h3>\n<p>Podremos crear propiedades propias de la siguiente forma:</p>\n<pre><code>#set ( $miPropiedad = &#39;valor&#39; )\n</code></pre><p>En este punto tendremos toda la libertad que ofrece Velocity para concatenar cadenas, obtener la fecha del sistema, etc. Estas propiedades que creemos las podemos usar dentro del contenido del fichero mediante <code>$miPropiedad</code>.</p>\n<p>También tenemos la posibilidad de renombrar ficheros según nuestras necesidades durante el proceso de generación de nuestro proyecto a partir de la plantilla. Para poder usar variables en el nombre del fichero usaremos dos careateres guión bajo (_) rodeando el nombre de la varible para indicar que se debe sustituir por su vlaor. Por ejemplo:</p>\n<pre><code class=\"hljs\">__miPropiedad__App<span class=\"hljs-class\">.java</span>\n__artifactId__-context<span class=\"hljs-class\">.xml</span>\n__groupId__App.java</code></pre>\n\n<h3 id=\"personalizar-el-nombre-de-ficheros-con-variables-\">Personalizar el nombre de ficheros con variables.</h3>\n<p>De forma predeterminada tenemos usa serie da variables ya predefinidas quepodemos usar para renombrar ficheros de nuestra plantilla, pero nos puede interesar crear variables en el momento de generar el proyecto para renombrar ficheros. Para poder hacer esto podemos valernos de que el primer fichero que se procesa es el pom.xml y crear en el las variebles con el valor que necesitemos. Posteriormente podremos hacer referencia a esas variables definidas en el nombre del fichero. Por ejemplo podemos definir el fichero pom.xml de la siguiente forma:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">#set ( $customProperty = 'Excelsit' )</span>\n<span class=\"hljs-comment\">#set ( $theArtifactId = $artifactId )</span>\n<span class=\"hljs-comment\">#set ( $thegroupId = $groupId )</span>\n<span class=\"hljs-comment\">#set ( $theVersion = $version )</span>\n<span class=\"hljs-variable\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</span>\n  <span class=\"hljs-variable\">&lt;modelVersion&gt;</span>4.0.0<span class=\"hljs-variable\">&lt;/modelVersion&gt;</span>\n  <span class=\"hljs-variable\">&lt;groupId&gt;</span>$thegroupId<span class=\"hljs-variable\">&lt;/groupId&gt;</span>\n  <span class=\"hljs-variable\">&lt;artifactId&gt;</span>$theArtifactId<span class=\"hljs-variable\">&lt;/artifactId&gt;</span>\n  <span class=\"hljs-variable\">&lt;version&gt;</span>$theVersion<span class=\"hljs-variable\">&lt;/version&gt;</span>\n\n  <span class=\"hljs-variable\">&lt;dependencies&gt;</span>\n    <span class=\"hljs-variable\">&lt;dependency&gt;</span>\n      <span class=\"hljs-variable\">&lt;groupId&gt;</span>junit<span class=\"hljs-variable\">&lt;/groupId&gt;</span>\n      <span class=\"hljs-variable\">&lt;artifactId&gt;</span>junit<span class=\"hljs-variable\">&lt;/artifactId&gt;</span>\n      <span class=\"hljs-variable\">&lt;version&gt;</span>3.8.1<span class=\"hljs-variable\">&lt;/version&gt;</span>\n      <span class=\"hljs-variable\">&lt;scope&gt;</span>test<span class=\"hljs-variable\">&lt;/scope&gt;</span>\n    <span class=\"hljs-variable\">&lt;/dependency&gt;</span>\n  <span class=\"hljs-variable\">&lt;/dependencies&gt;</span>\n<span class=\"hljs-variable\">&lt;/project&gt;</span></code></pre>\n\n<p>En la línea 1 hemos definido una propiedad a la que le hemos dado cierto valor. Pero recuerda que internamente funciona con Velocity, por lo que podremos generar ese valor de cualquier forma. Podremos usar esa propiedad para renombrar ficheros según la forma que hemos visto anteriormente __customProperty__App.java</p>\n<h2 id=\"usar-la-plantilla-\">Usar la plantilla.</h2>\n<p>Para usar la plantilla lo más sencillo es realizar una instalación local. Usaremos el siguiente comando dentro de la carpeta de nuestro proyecto:</p>\n<pre><code>$mvn install\n</code></pre><p>Una vez instalado podremos usarlo meniante archetype:generate. Por defecto el plugin buscará en catalogo central de Maven. Para modificar este comportamiento usaremos el parámetro archetypeCatalog=local:</p>\n<pre><code>mvn archetype:generate -DarchetypeCatalog=local\n</code></pre><p>Si no aparece nuestra plantilla quizás deberamos actualizar el catalogo mediante el comando:</p>\n<pre><code>mvn archetype:crawl\n</code></pre><h2 id=\"c-digo-de-ejemplo\">Código de ejemplo</h2>\n<p>Descarga el ejemplo de plantilla: <a href=\"/uploads/2011/04/09/frnd-example-archetype.zip\">example-archetype</a>.</p>\n","path":"blog/creaci-n-de-una-plantilla-para-proyecto-con-maven","excerpt":"Archetype: una plantilla para crear rapidamente la estructura de tu proyecto."},{"title":"Uso del Table Control en tu Dynpro.","draft":false,"date":"2010-08-11T00:00:00.000Z","description":"SAP","author":"Fernando González","tags":["abap","asistente","dynpro","module","PAI","PBO","SAP","subrutina","table control"],"contents":"<p>El objetivo es conocer los conceptos más importantes a la hora de trabajar con un table control y crear uno mediante el\nasistente. También se estudiará el código que generado para las tareas más usuales y se darán alguno ejemplos.</p>\n<!-- more -->\n<p>Para usar correctamente este control hay que tener un punto clave muy claro. En cada ciclo PAI – PBO el Table Control\nmostrara el contenido de la tabla interna al que se haya asociado. Por lo tanto, si se hace una modificación en los\ndatos que se están mostrando en la Dynpro estos hay que salvarlos en la tabla interna en el PAI para que al completarse\nel ciclo se muestren las modificaciones.</p>\n<p>Otra de las necesidades más comunes al usar un Table Control es el hecho de activar/desactivar alguna de sus celdas\nsegún una condición en alguno de los campos de la fila en la que se encuentra o según el contenido de ese campo. Esta\ntarea se realiza en el PBO ya que es algo que se debe realizar justo antes de mostrar la tabla.</p>\n<p>En el siguiente esquema vemos cada una de las acciones que se pueden realizar para manejar un Table Control y donde se\ndeben realizar.</p>\n<p><img src=\"/images/2010/08/1.png\" alt=\"Esquema general\" title=\"Esquema general\" itemprop=\"image\"></p>\n<h2 id=\"pasos-previos-para-crear-un-table-control-\">Pasos previos para crear un Table Control.</h2>\n<p>Crear un Table Control es un proceso muy sencillo usando el Wizard que tenemos en el entorno de desarrollo, pero antes\nde ejecutar este Wizard hay que crear una serie de elementos en nuestro código:</p>\n<p>Crear un tipo estructura que contendrá los campos que se mostrarán en la tabla junto con un campo oculto que se usará\nde forma interna para marcar las filas seleccionadas. Para nuestro ejemplo quedará de la siguiente forma, donde el campo mark será el campo interno para marcar las filas seleccionadas:</p>\n<pre><code>TYPES: BEGIN OF ty_s_tablecontrol,\nidemp TYPE ZEMPLEADOS-IDEMP,\nfecha TYPE ZDATGEN-FECHA,\nnombr TYPE ZEMPLEADOS-NOMBR,\napel1 TYPE ZEMPLEADOS-APEL1,\napel2 TYPE ZEMPLEADOS-APEL2,\nmark TYPE C,\nDELETE TYPE C,\nEND OF ty_s_tablecontrol.\n</code></pre><p>Definir un tipo tabla según la estructura anteriormente creada.</p>\n<pre><code>TYPES ty_t_tablecontrol TYPE STANDARD TABLE OF ty_s_tablecontrol.\n</code></pre><p>Definir una variable para la tabla interna y su área de trabajo.</p>\n<pre><code>DATA wa_tablecontrol TYPE ty_s_tablecontrol.\nDATA it_tablecontrol TYPE ty_t_tablecontrol.\n</code></pre><h2 id=\"uso-del-wizard\">Uso del Wizard</h2>\n<p>En este momento ya tenemos todos los elementos básicos para usar el Wizard y mostrar nuestro Table Control.</p>\n<p><strong>Importante: Antes de usar el asistente hay que activar el programa por completo.</strong></p>\n<p>Crearemos una Dynpro de tipo normal y cuya pantalla siguiente sea esa misma Dynpro. Para ejecutar dicho asistente\nacudimos al Layout de nuestra Dynpro y pulsamos el botón Table Control mediante Wizard. Podemos realizar lo mismo sin el Asistente pero será trabajar de más y con mayores posibilidades de equivocarnos.</p>\n<p>Para ejecutar el asistente tenemos usaremos el icono de la barra lateral del Layout.</p>\n<p><img src=\"/images/2010/08/2.png\" alt=\"Alt Insertar un table control con el asistente\" title=\"Insertar un table control con el asistente\"></p>\n<p>El primer paso del asistente pulsaremos el botón Continuar. De momento es sencillo.</p>\n<p><img src=\"/images/2010/08/3.png\" alt=\"Alt Asistente - Inicio\" title=\"Asistente - Inicio\"></p>\n<p>En el segundo paso es darle un nombre a nuestro Table Control. Es importante elegir un nombre no muy largo por que el\nasistente creará subrutinas según ese nombre y si es muy largo se nos irá del número de caracteres máximo.</p>\n<p><img src=\"/images/2010/08/4.png\" alt=\"Alt Asistente - Nombre del Table Control\" title=\"Asistente - Nombre del Table Control\"></p>\n<p>En el tercer paso nos pide si el Table Control va a manejar directamente una tabla del diccionario de datos o una tabla\ninterna. Si seleccionamos la primera opción, con este Table Control vamos a modificar directamente el contenido de una\ntabla de la base de datos. No es necesario decir que esto puede ser un poco peligroso.</p>\n<p><img src=\"/images/2010/08/5.png\" alt=\"Alt Asistente - Nombre de la tabla\" title=\"Asistente - Nombre de la tabla\"></p>\n<p>Si seleccionamos la segunda opción deberemos indicar la tabla interna que va a gestionar el Table Control  y el área de\ntrabajo que usaremos. Estos datos son las variables que creamos anteriormente.</p>\n<p>En el cuarto paso seleccionaremos las filas que queremos mostrar en la tabla. Dejaremos sin seleccionar el campo que\nhemos creado para guardar las filas seleccionadas.</p>\n<p><img src=\"/images/2010/08/6.png\" alt=\"Alt Asistente - Definición de columnas\" title=\"Asistente - Definición de columnas\"></p>\n<p>En el siguiente paso seleccionaremos si la tabla será sólo de salida, es decir, no se podrán hacer modificaciones sobre el contenido de la tabla, de Entrada, que entonces permitirá realizar modificaciones sobre el contenido y crear nuevas líneas. Hay que tener en cuenta que esta configuración se podrá modificar posteriormente accediendo a la configuración desde el Layout o mediante código activando o desactivando la entrada de datos en el campo o la columna. Esto ya lo veremos posteriormente. En este ejemplo crearemos el Table Control de tipo Entrada y añadiremos la columna reservada en\nlos pasos anteriores para el Campo columna de selección.  Habilitaremos la selección múltiple si queremos que esté\ndisponible al usuario.</p>\n<p><img src=\"/images/2010/08/7.png\" alt=\"Alt Asistente - Atributos del Table Control\" title=\"Asistente - Atributos del Table Control\"></p>\n<p>En el siguiente paso nos solicita que botones estándar tiene que crear para nuestro Table Control donde seleccionaremos\ntodas las casillas.</p>\n<p><img src=\"/images/2010/08/8.png\" alt=\"Alt Asistente - Selección de funciones\" title=\"Asistente - Selección de funciones\"></p>\n<p>En este penúltimo paso indicaremos el nombre de los includes que usamos en nuestro código y donde el asistenta\nintroducirá las partes de código necesarias. Si seguimos la nomenclatura estándar tendremos los siguientes includes\npara cada caso:</p>\n<ul>\n<li>*TOP – Definiciones de datos.</li>\n<li>*O01 – PBO.</li>\n<li>*I01 – PAI.</li>\n<li>*F01 – Subrutinas.</li>\n</ul>\n<p><img src=\"/images/2010/08/9.png\" alt=\"Alt Asistente - Especificación de includes\" title=\"Asistente - Especificación de includes\"></p>\n<p>El último paso no sindicará las acciones que se van a realizar. Pulsaremos sobre finalizar y el asistente creará el\ncódigo necesario.</p>\n<p><img src=\"/images/2010/08/10.png\" alt=\"Alt Asistente - Finalizar\" title=\"Asistente - Finalizar\"></p>\n<p>En las siguientes secciones analizaremos el código para comprenderlo.</p>\n<h2 id=\"c-digo-generado-por-el-asistente-en-el-pbo\">Código generado por el asistente en el PBO</h2>\n<p>En la pestaña de la lógica de proceso se ha creado el siguiente código para el PBO.</p>\n<pre><code>MODULE TC_VAC_CHANGE_TC_ATTR.\nMODULE TC_VAC_CHANGE_COL_ATTR.\nLOOP AT   IT_TABLECONTROL\n     INTO WA_TABLECONTROL\n     WITH CONTROL TC_VAC\n     CURSOR TC_VAC-CURRENT_LINE.\n  MODULE TC_VAC_GET_LINES.\n  MODULE TC_VAC_CHANGE_FIELD_ATTR.\nENDLOOP.\n</code></pre><p>Ciertas líneas aparecerán comentadas pero en este manual expondremos para que se utilizara cada uno de los módulos.</p>\n<p>Dentro del módulo TC_VAC_CHANGE_TC_ATTR de la línea 1 pondríamos el código para cambiar los atributos del Table Control por completo.</p>\n<p>Dentro del módulo TC_VAC_CHANGE_COL_ATTR de la línea 2 pondríamos el código para cambiar los atributos de las columnas del Table Control.</p>\n<p>Desde la línea 3 hasta la 9 hay un bucle que recorre cada una de las líneas de la tabla interna. Será en este bucle\ndonde se realizarán las diferentes acciones referentes a modificar el aspecto de cada una de las celdas de la tabla\ncomo por ejemplo permitir o no la modificación de esa celda. Dentro del módulo TC_VAC_CHANGE_FIELD_ATTR será el punto\nmás idóneo para realizar esas tareas.  En el siguiente trozo de código se puede ver un ejemplo de lo que podemos\nrealizar.</p>\n<pre><code>MODULE TC_VAC_CHANGE_FIELD_ATTR OUTPUT.\n  LOOP AT SCREEN.\n    IF screen-NAME = &#39;WA_TABLECONTROL-FECHA&#39;.\n      IF WA_TABLECONTROL-FECHA &gt; sy-datum.\n        screen-INPUT = &#39;1&#39;.\n      ENDIF.\n    ENDIF.\n    MODIFY SCREEN.\n  ENDLOOP.\nENDMODULE.\n</code></pre><p>En el anterior código, se activan las casillas de la tabla que contengan una fecha mayor a la del día de hoy. En la\nlínea 2 se realiza un bucle sobre los campos de una fila de la tabla. En la línea 3 se comprueba si el capo actual de\nla ventana es el que no s interesa y en la línea 4 se comprueba la condición sobre ese campo. Si la condición se\ncumple, en la línea 5 se cambia la propiedad de la ventana que indica si el campo está disponible para operaciones de\nentrada y salida. Finalmente en la línea 8 se realiza la modificación de los cambios que se han realizado en la ventana.</p>\n<h2 id=\"c-digo-generado-por-el-asistente-en-el-pai\">Código generado por el asistente en el PAI</h2>\n<p>En la pestaña de la lógica de proceso se ha creado el siguiente código para el PBO.</p>\n<pre><code>LOOP AT IT_TABLECONTROL.\n    CHAIN.\n      FIELD WA_TABLECONTROL-IDEMP.\n      FIELD WA_TABLECONTROL-FECHA.\n      FIELD WA_TABLECONTROL-NOMBR.\n      FIELD WA_TABLECONTROL-APEL1.\n      FIELD WA_TABLECONTROL-APEL2.\n      MODULE TC_VAC_MODIFY ON CHAIN-REQUEST.\n    ENDCHAIN.\n    FIELD WA_TABLECONTROL-MARK\n      MODULE TC_VAC_MARK ON REQUEST.\nENDLOOP.\nMODULE TC_VAC_USER_COMMAND.\nMODULE TC_VAC_CHANGE_TC_ATTR.\nMODULE TC_VAC_CHANGE_COL_ATTR.\n</code></pre><p>En la linea 8 se hace la llamada al módulo que realizará la modificación en la tabla interna de los cambios que se\nhayan realizado en la ventana. En este paso sería importante antes de realizar dicha modificación, comprobar la validez\nde los datos introducidos en la Dynpro Como en el siguiente ejemplo:</p>\n<pre><code>MODULE TC_VAC_MODIFY INPUT.\n IF WA_TABLECONTROL-FECHA &gt; sy-datum.\n   MODIFY IT_TABLECONTROL\n     FROM WA_TABLECONTROL\n     INDEX TC_VAC-CURRENT_LINE.\n ELSE.\n   MESSAGE &#39;Fecha anterior a la actual&#39; TYPE &#39;W&#39;.\n ENDIF.\nENDMODULE.\n</code></pre><p>Como vemos si la fecha solicitada es  mayor que la actual (línea 2) se realiza la modificación. Si es anterior se\nmuestra el mensaje de error. Es importante notar que al estar el módulo dentro de un CHAIN … ENDCHAIN si se produce\nun mensaje de error en el módulo se regresa a la Dynpro y se activarán únicamente para modificación los campos\ndeclarados con la clausula FIELD .</p>\n<p>En la línea 13 le realiza una llamada al módulo TC_VAC_USER_COMMAND. Este módulo es el encargado de gestionar los\nbotones propios del Table Control  para insertar, borrar, avanzar o retroceder paginas o filas, marcar o desmarcar\nuna fila, etc.</p>\n<p>Dentro del módulo TC_VAC_USER_COMMAND se llama a la subrutina USER_OK_TC que es la encargada de comprobar cual es el\nbotón que ha sido pulsado y encaminar la ejecución a la subrutina encargada de la lógica de ese botón. En el siguiente\ndiagrama se puede ver dicha lógica.</p>\n<p><img src=\"/images/2010/08/11.png\" alt=\"Alt Flujo de la lógica de control para los botones del Table Control\" title=\"Flujo de la lógica de control para los botones del Table Control\"></p>\n<p>El código estándar funciona para la mayoría de las necesidades, pero si por ejemplo necesitamos que la inserción de\nnuevas filas en la tabla ciertos campos se completen por defecto, necesitaremos modificar el código de la subrutina\nFCODE_INSERT_ROW.</p>\n","cover":{"src":"/images/2010/08/1.png","alt":"Esquema general","title":"Esquema general"},"path":"blog/uso-del-table-control-en-tu-dynpro","excerpt":"El objetivo es conocer los conceptos más importantes a la hora de trabajar con un table control y crear uno mediante el\nasistente. También se estudiará el código que generado para las tareas más usuales y se darán alguno ejemplos."},{"title":"Select Options en tu WebDynpro.","draft":false,"date":"2010-03-14T00:00:00.000Z","description":null,"author":"Fernando González","tags":["abap","asistente","dynpro","module","PAI","PBO","SAP","subrutina","table control"],"contents":"<p>SELECT-OPTIONS de las Dynpro ABAP son una forma muy sencilla de crear filtros complejos para realizar\nconsultas pero tambien se pueden usar en las WebDynpro. Aquí te explicamos como.</p>\n<!-- more -->\n<p>En las WebDynpro también disponemos de las capacidades que ofrece ese elemento de ABAP usando el componente WDR_SELECT_OPTIONS.</p>\n<p>En este tutorial veremos un ejemplo sencillo y las diferentes opciones de personalización más comunes que ofrece.</p>\n<p>El objetivo que perseguimos es obtener una pantalla de selección como la que sigue:</p>\n<p><img src=\"/images/2010/03/resultado-final.png\" alt=\"Alt Resultado Final SELECT-OPTIONS en WebDynpro.\" title=\"Resultado Final SELECT-OPTIONS en WebDynpro.\" itemprop=\"image\"></p>\n<p>En esta pantalla se han eliminado las opciones de selección extendidas pero estas salen por defecto y solo tendrás que\neliminar unos parámetros para que aparezcan.</p>\n<h2 id=\"como-usar-el-componente-wdr_select_options\">Como usar el componente WDR_SELECT_OPTIONS</h2>\n<p>El primer paso será indicar el uso del componente. Esto se hace en la vista del componente mediante los botones añadir\ny eliminar uso. Para este ejemplo usaremos tambien SALV_WD_TABLE para mostrar la tabla de materiales. El nombre que le\npongamos en la columna “Component Use” será importante ya que se usará posteriormente.</p>\n<p><img src=\"/images/2010/03/componente.png\" alt=\"Alt Vista de Componente.\" title=\"Vista de Componente.\"></p>\n<p>En nuestro component controller también indicaremos el uso del componente para manejar select options.</p>\n<p><img src=\"/images/2010/03/sowd.png\" alt=\"Alt Vista del Component Controller\" title=\"Vista del Component Controller\"></p>\n<p>En nuestra ventana principal crearemos un contenedor de vistas (ViewContainerUIElement) para nuestro conjunto de campos\nde selección.</p>\n<p><img src=\"/images/2010/03/vista-main.png\" alt=\"Alt Vista MAIN\" title=\"Vista MAIN\"></p>\n<p>En la vista de la ventana incrustaremos la vista WND_SELECTION_SCREEN que nos facilita el componente WDR_SELECT_OPTIONS.\nEsto es así por que en un mismo componente se pueden incluir varios campos de selección además de campos de entrada\nsimples (Input Fields, Check Boxes, etc.).</p>\n<p><img src=\"/images/2010/03/vista-ventana.png\" alt=\"Alt Vista de Ventana\" title=\"Vista de Ventana\"></p>\n<p>En este momento tenemos la vista vacia, y tenemos que añadir los campos de selección que queramos. Esto se hace\nmediante 2 métodos que proporciona el componente en la interfaz if_wd_select_options. El primero crea la\ntabla donde se guardan los rangos de selección:</p>\n<pre><code>lt_range_matnr = lr_helper-&gt;<span class=\"hljs-function\"><span class=\"hljs-title\">create_range_table</span><span class=\"hljs-params\">( i_typename = <span class=\"hljs-string\">'NOMBRE_TIPO_DATOS'</span> )</span></span>.</code></pre>\n\n<p>El segundo crea los campos de selección en la vista:</p>\n<pre><code><span class=\"hljs-prompt\">lr_helper-&gt;</span>add_selection_field( i_id = <span class=\"hljs-string\">'NOMBRE_CAMPO'</span>\nit_result = lt_range_matnr ).</code></pre>\n\n<p>En esta función se han puesto los parámetros imprescindibles para crear un SELECT-OPTIONS como en las Dynpro ABAP,\npero hay además otros parámetros que pueden resultar útiles como:</p>\n<ul>\n<li>i_no_extension = [abap_true | abap_false] Elimina la posibilidad de crear una tabla de selecciones múltiple.</li>\n<li>i_no_complex_restrictions = [abap_true |abap_false] Elimina la posibilidad de cambiar el operador relacional.</li>\n</ul>\n<p>Estas tareas se realizarán en el método WDDOINIT de nuestro component controller, que es donde hemos declarado el uso del componente de sap para manejar select options, por lo que para nuestro ejemplo quedará como sigue:</p>\n<pre><code>METHOD wddoinit <span class=\"hljs-built_in\">.</span>\n\n  <span class=\"hljs-built_in\">DATA</span> lr_select_options <span class=\"hljs-keyword\">TYPE</span> REF <span class=\"hljs-keyword\">TO</span> iwci_wdr_select_options<span class=\"hljs-built_in\">.</span>\n  <span class=\"hljs-built_in\">DATA</span> lr_helper <span class=\"hljs-keyword\">TYPE</span> REF <span class=\"hljs-keyword\">TO</span> if_wd_select_options<span class=\"hljs-built_in\">.</span>\n  <span class=\"hljs-built_in\">DATA</span> lt_range_matnr <span class=\"hljs-keyword\">TYPE</span> REF <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-built_in\">DATA</span><span class=\"hljs-built_in\">.</span>\n  <span class=\"hljs-built_in\">DATA</span> lt_range_matkl <span class=\"hljs-keyword\">TYPE</span> REF <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-built_in\">DATA</span><span class=\"hljs-built_in\">.</span>\n  <span class=\"hljs-built_in\">DATA</span> lt_range_mtart <span class=\"hljs-keyword\">TYPE</span> REF <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-built_in\">DATA</span><span class=\"hljs-built_in\">.</span>\n  <span class=\"hljs-built_in\">DATA</span> lr_comp_usage <span class=\"hljs-keyword\">TYPE</span> REF <span class=\"hljs-keyword\">TO</span> if_wd_component_usage<span class=\"hljs-built_in\">.</span>\n  <span class=\"hljs-built_in\">DATA</span> lv_otr_text <span class=\"hljs-keyword\">TYPE</span> <span class=\"hljs-built_in\">STRING</span><span class=\"hljs-built_in\">.</span>\n\n<span class=\"hljs-subst\">*</span>this code is <span class=\"hljs-keyword\">to</span> instantiate the component wdr_select_options\n  lr_comp_usage <span class=\"hljs-subst\">=</span> wd_this<span class=\"hljs-subst\">-&gt;</span>wd_cpuse_select_options( )<span class=\"hljs-built_in\">.</span>\n  <span class=\"hljs-keyword\">IF</span> lr_comp_usage<span class=\"hljs-subst\">-&gt;</span>has_active_component( ) IS INITIAL<span class=\"hljs-built_in\">.</span>\n    lr_comp_usage<span class=\"hljs-subst\">-&gt;</span>create_component( )<span class=\"hljs-built_in\">.</span>\n  ENDIF<span class=\"hljs-built_in\">.</span>\n\n<span class=\"hljs-subst\">*</span> Call the interface controller method init_selection_screen <span class=\"hljs-keyword\">to</span> get the helper class\n  lr_select_options <span class=\"hljs-subst\">=</span> wd_this<span class=\"hljs-subst\">-&gt;</span>wd_cpifc_select_options( )<span class=\"hljs-built_in\">.</span>\n  lr_helper <span class=\"hljs-subst\">=</span> lr_select_options<span class=\"hljs-subst\">-&gt;</span>init_selection_screen( )<span class=\"hljs-built_in\">.</span>\n\n<span class=\"hljs-subst\">*</span> <span class=\"hljs-built_in\">Set</span> <span class=\"hljs-built_in\">global</span> options<span class=\"hljs-built_in\">.</span>\n  lr_helper<span class=\"hljs-subst\">-&gt;</span>set_global_options(\n                              i_display_btn_cancel  <span class=\"hljs-subst\">=</span> abap_false\n                              i_display_btn_check   <span class=\"hljs-subst\">=</span> abap_false\n                              i_display_btn_reset   <span class=\"hljs-subst\">=</span> abap_false\n                              i_display_btn_execute <span class=\"hljs-subst\">=</span> abap_false )<span class=\"hljs-built_in\">.</span>\n\n<span class=\"hljs-subst\">*</span>Use the helper class <span class=\"hljs-keyword\">to</span> create a range table for the <span class=\"hljs-built_in\">data</span> elements MATNR, MATKL <span class=\"hljs-literal\">and</span> MTART<span class=\"hljs-built_in\">.</span>\n  lt_range_matnr <span class=\"hljs-subst\">=</span> lr_helper<span class=\"hljs-subst\">-&gt;</span>create_range_table( i_typename <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'MARA-MATNR'</span> )<span class=\"hljs-built_in\">.</span>\n  lt_range_matkl <span class=\"hljs-subst\">=</span> lr_helper<span class=\"hljs-subst\">-&gt;</span>create_range_table( i_typename <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'MARA-MATKL'</span> )<span class=\"hljs-built_in\">.</span>\n  lt_range_mtart <span class=\"hljs-subst\">=</span> lr_helper<span class=\"hljs-subst\">-&gt;</span>create_range_table( i_typename <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'MARA-MTART'</span> )<span class=\"hljs-built_in\">.</span>\n\n<span class=\"hljs-subst\">*</span>Add a Selection Screen Field\n  lr_helper<span class=\"hljs-subst\">-&gt;</span>add_selection_field( i_id <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'SO_MATNR'</span>\n                                  it_result <span class=\"hljs-subst\">=</span> lt_range_matnr\n                                  i_no_extension <span class=\"hljs-subst\">=</span> abap_true             <span class=\"hljs-string\">\" Supress the multiple selection option.\n                                  i_use_complex_restriction = abap_true  \"</span> Supress the relational operator button<span class=\"hljs-built_in\">.</span>\n                                  )<span class=\"hljs-built_in\">.</span>\n  lr_helper<span class=\"hljs-subst\">-&gt;</span>add_selection_field( i_id <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'SO_MATKL'</span>\n                                  it_result <span class=\"hljs-subst\">=</span> lt_range_matkl\n                                  i_value_help_structure <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'MARA'</span>        <span class=\"hljs-string\">\" Search help.\n                                  i_value_help_structure_field = 'MATKL'\n                                  i_no_extension = abap_true             \"</span> Supress the multiple selection option<span class=\"hljs-built_in\">.</span>\n                                  i_use_complex_restriction <span class=\"hljs-subst\">=</span> abap_true  <span class=\"hljs-string\">\" Supress the relational operator button.\n                                  ).\n  lr_helper-&gt;add_selection_field( i_id = 'SO_MTART'\n                                  it_result = lt_range_mtart\n                                  i_value_help_mode = '0'\n                                  i_value_help_structure = 'MARA'        \"</span> Search help<span class=\"hljs-built_in\">.</span>\n                                  i_value_help_structure_field <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'MTART'</span>\n                                  i_no_extension <span class=\"hljs-subst\">=</span> abap_true             <span class=\"hljs-string\">\" Supress the multiple selection option.\n                                  i_use_complex_restriction = abap_true  \"</span> Supress the relational operator button<span class=\"hljs-built_in\">.</span>\n                                  )<span class=\"hljs-built_in\">.</span>\nENDMETHOD<span class=\"hljs-built_in\">.</span></code></pre>\n\n<p>Es posible crear todo tipo de campos de entrada mediante el método add_parameter_field. Por ejemplo, para crear un check box:</p>\n<pre><code><span class=\"hljs-prompt\">lr_helper-&gt;</span>add_parameter_field( i_id = <span class=\"hljs-string\">'NOMBRE_CAMPO'</span>\n                                  i_as_checkbox = abap_true\n                                  i_description = lv_otr_text\n                                  ).</code></pre>\n\n<p>En este momento ya tenemos una pantalla donde se muestra un conjunto de campos de selección para nuestras necesidades. Nos queda resolver la necesidad de chequear la corrección de los datos introducidos por el usuario y la obtención de estos para generar la consulta.</p>\n<p>Para el primer paso, el componente ofrece el método check_all_selection_fields que devuelve el número de errores que se han producido. Posteriormente podemos usar un IF para comprobar si retorna 0 errores y continuar con el proceso o cancelar. El componente mostrará automáticamente los errores en la pantalla.</p>\n<pre><code>CALL <span class=\"hljs-function\"><span class=\"hljs-keyword\">METHOD</span> <span class=\"hljs-title\">lr_helper</span>-&gt;<span class=\"hljs-title\">check_all_selection_fields</span>\n    <span class=\"hljs-title\">IMPORTING</span>\n      <span class=\"hljs-title\">e_num_error_msgs</span>   = <span class=\"hljs-title\">lv_num_error_msgs</span>\n*      <span class=\"hljs-title\">e_num_warning_msgs</span> = <span class=\"hljs-title\">lv_num_warning_msgs</span>\n*      <span class=\"hljs-title\">e_num_info_msgs</span>    = <span class=\"hljs-title\">lv_num_info_msgs</span>\n      .\n\n  <span class=\"hljs-title\">IF</span> <span class=\"hljs-title\">lv_num_error_msgs</span> <span class=\"hljs-title\">EQ</span> 0\n*     <span class=\"hljs-title\">lv_num_warning_msgs</span> <span class=\"hljs-title\">eq</span> 0\n*     <span class=\"hljs-title\">lv_num_info_msgs</span> <span class=\"hljs-title\">eq</span> 0\n  .\n* <span class=\"hljs-title\">No</span> <span class=\"hljs-title\">errors</span>\n  <span class=\"hljs-title\">ELSE</span>.\n* <span class=\"hljs-title\">At</span> <span class=\"hljs-title\">least</span> <span class=\"hljs-title\">one</span> <span class=\"hljs-title\">error</span>.\n  <span class=\"hljs-title\">ENDIF</span>.</span></code></pre>\n\n<p>El siguiente paso es obtener la tabla con las opciones de selección que ha realizado el usiario. Esto se hará de la siguiente forma:</p>\n<pre><code><span class=\"hljs-built_in\">DATA</span> so_matnr <span class=\"hljs-keyword\">TYPE</span> REF <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-built_in\">DATA</span><span class=\"hljs-built_in\">.</span>\nFIELD<span class=\"hljs-attribute\">-SYMBOLS</span>  <span class=\"hljs-keyword\">TYPE</span> ANY TABLE<span class=\"hljs-built_in\">.</span>\nso_matnr <span class=\"hljs-subst\">=</span> lr_helper<span class=\"hljs-subst\">-&gt;</span>get_range_table_of_sel_field( i_id <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'SO_MATNR'</span> )<span class=\"hljs-built_in\">.</span>\nASSIGN so_matnr<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-subst\">*</span> <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-built_in\">.</span></code></pre>\n\n<p>El FIELD-SYMBOL es necesario para usarlo posteriormente en la consulta a la base de datos (sentencia SELECT … IN …) ya que de otra forma se producirá un error de compilación.</p>\n<p>Para realizar el chequeo de los campos que no son SELECT-OPTIONS y obtener sus valores, usaremos los métodos check_all_parameter_fields y get_value_of_parameter_field de la interfaz if_wd_select_options.</p>\n<p>Estos metodos se usarán en una acción asignada a un botón. Para el ejemplo, hemos creado una acción MOSTRAR asignandola a su correspondiente botón. El código completo quedará como sigue:</p>\n<pre><code class=\"hljs javascript\">METHOD onactionmostrar .\n\n  DATA lo_el_context TYPE REF TO if_wd_context_element.\n  DATA ls_context TYPE wd_this-&gt;element_context.\n  DATA lv_limit TYPE wd_this-&gt;element_context-limit.\n\n  DATA lo_nd_alv_table TYPE REF TO if_wd_context_node.\n  DATA lt_alv_table TYPE wd_this-&gt;elements_alv_table.\n\n  DATA so_matnr TYPE REF TO DATA.\n  DATA so_matkl TYPE REF TO DATA.\n  DATA so_mtart TYPE REF TO DATA.\n*  DATA limit TYPE REF TO data.\n  FIELD-SYMBOLS &lt;so_matnr&gt; TYPE ANY TABLE.\n  FIELD-SYMBOLS &lt;so_matkl&gt; TYPE ANY TABLE.\n  FIELD-SYMBOLS &lt;so_mtart&gt; TYPE ANY TABLE.\n\n  DATA lr_select_options TYPE REF TO iwci_wdr_select_options.\n  DATA lr_helper TYPE REF TO if_wd_select_options.\n  DATA lr_comp_usage TYPE REF TO if_wd_component_usage.\n  DATA lt_fields TYPE if_wd_select_options=&gt;tt_selection_screen_item.\n  FIELD-SYMBOLS &lt;ls_field&gt; TYPE if_wd_select_options=&gt;t_selection_screen_item.\n  DATA: lv_num_error_msgs TYPE i,\n        lv_num_warning_msgs TYPE i,\n        lv_num_info_msgs TYPE i.\n\n* Get report table from context.\n  lo_nd_alv_table = wd_context-&gt;get_child_node( NAME = wd_this-&gt;wdctx_alv_table ).\n\n  lr_comp_usage = wd_this-&gt;wd_cpuse_select_options( ).\n  IF lr_comp_usage-&gt;has_active_component( ) IS INITIAL.\n    lr_comp_usage-&gt;create_component( ).\n  ENDIF.\n\n  lr_select_options = wd_this-&gt;wd_cpifc_select_options( ).\n\n  lr_helper = lr_select_options-&gt;init_selection_screen( ).\n\n* check correction of selection fields.\n  CALL METHOD lr_helper-&gt;check_all_selection_fields\n    IMPORTING\n      e_num_error_msgs   = lv_num_error_msgs\n*      e_num_warning_msgs = lv_num_warning_msgs\n*      e_num_info_msgs    = lv_num_info_msgs\n      .\n\n  IF lv_num_error_msgs EQ <span class=\"hljs-number\">0</span>\n*     lv_num_warning_msgs eq <span class=\"hljs-number\">0</span>\n*     lv_num_info_msgs eq <span class=\"hljs-number\">0</span>\n  .\n    lr_helper-&gt;get_selection_screen_items(\n                  IMPORTING et_selection_screen_items = lt_fields ).\n\n* Retrieve the data from the select option\n    so_matnr = lr_helper-&gt;get_range_table_of_sel_field( i_id = <span class=\"hljs-string\">'SO_MATNR'</span> ).\n    ASSIGN so_matnr-&gt;* TO &lt;so_matnr&gt;.\n\n    so_matkl = lr_helper-&gt;get_range_table_of_sel_field( i_id = <span class=\"hljs-string\">'SO_MATKL'</span> ).\n    ASSIGN so_matkl-&gt;* TO &lt;so_matkl&gt;.\n\n    so_mtart = lr_helper-&gt;get_range_table_of_sel_field( i_id = <span class=\"hljs-string\">'SO_MTART'</span> ).\n    ASSIGN so_mtart-&gt;* TO &lt;so_mtart&gt;.\n\n*    limit = lr_helper-&gt;get_value_of_parameter_field( i_id  = <span class=\"hljs-string\">'LIMIT'</span> ).\n\n    lo_el_context = wd_context-&gt;get_element( ).\n    lo_el_context-&gt;get_attribute(\n      EXPORTING\n        NAME =  `LIMIT`\n      IMPORTING\n        VALUE = lv_limit ).\n\n    IF lv_limit = abap_true.\n      SELECT m\\x7ematnr d~maktx txtm~mtbez txtt~wgbez m~ernam\n        INTO CORRESPONDING FIELDS OF TABLE lt_alv_table\n        FROM  ( ( ( mara AS m\n                LEFT OUTER JOIN makt AS d ON m~matnr = d~matnr AND d~spras = sy-langu  )\n                LEFT OUTER JOIN t134t AS txtm ON m~mtart = txtm~mtart AND txtm~spras = sy-langu )\n                LEFT OUTER JOIN t023t AS txtt ON m~matkl = txtt~matkl AND txtt~spras = sy-langu )\n       UP TO <span class=\"hljs-number\">500</span> ROWS\n       WHERE m~matnr IN &lt;so_matnr&gt;\n         AND m~mtart IN &lt;so_mtart&gt;\n         AND m~matkl IN &lt;so_matkl&gt;\n       .\n    ELSE.\n      SELECT m~matnr d~maktx txtm~mtbez txtt~wgbez m~ernam\n       INTO CORRESPONDING FIELDS OF TABLE lt_alv_table\n       FROM  ( ( ( mara AS m\n               LEFT OUTER JOIN makt AS d ON m~matnr = d~matnr AND d~spras = sy-langu  )\n               LEFT OUTER JOIN t134t AS txtm ON m~mtart = txtm~mtart AND txtm~spras = sy-langu )\n               LEFT OUTER JOIN t023t AS txtt ON m~matkl = txtt~matkl AND txtt~spras = sy-langu )\n      WHERE m~matnr IN &lt;so_matnr&gt;\n        AND m~mtart IN &lt;so_mtart&gt;\n        AND m~matkl IN &lt;so_matkl&gt;\n      .\n    ENDIF.\n    IF sy-dbcnt &gt; <span class=\"hljs-number\">0.</span>\n      lo_nd_alv_table-&gt;bind_table( new_items = lt_alv_table set_initial_elements = abap_true ).\n      wd_this-&gt;fire_to_alv_plg(\n      ).\n    ELSE.\n      wd_this-&gt;fire_to_no_data_plg(\n      ).\n    ENDIF.\n  ENDIF.\nENDMETHOD.</code></pre>\n\n<p>##Completando el ejemplo.</p>\n<p>A partir de aqui, el resto del tutorial nos centramos en completar el ejemplo para poder mostrar el resultado de la consulta en un ALV. Si solo tienes interes en usar el componente para crear los SELECT_OPTIONS puedes terminar de leer aqui.</p>\n<p>Para almacenar los datos que se mostrarán en el ALV, crearemos un nodo en el controlador del componente (Component Controller) que contendrá los campos que deseemos mostrar. Para este ejemplo, realizaremos un informe sobre la tabla de materiales en la que mostraremos el numero de material, la descripción el grupo y el tipo en el idioma de inicio de sesión:</p>\n<ul>\n<li>mara-matnr</li>\n<li>makt-maktx</li>\n<li>t134t-mtbez</li>\n<li>t023t-wgbez</li>\n</ul>\n<p>En la vista del controlador ALV asociaremos el nodo creado en nuestro controlador con el nodo DATA que dispone el controlador del ALV. Esto hace que se muestren los datos en la tabla del ALV.</p>\n<p><img src=\"/images/2010/03/alv.png\" alt=\"Alt Mapeo datos ALV\" title=\"Mapeo datos ALV\"></p>\n<p>También deberemos crear los conectores de salida y los de entrada para las diferentes vistas y asociarlos. En la siguiente captura de pantalla se pueden apleciar los diferentes conectores creadoy y su conexión.</p>\n<p><img src=\"/images/2010/03/conectores.png\" alt=\"Alt Conectores\" title=\"Conectores\"></p>\n","cover":{"src":"/images/2010/03/resultado-final.png","alt":"Alt Resultado Final SELECT-OPTIONS en WebDynpro.","title":"Resultado Final SELECT-OPTIONS en WebDynpro."},"path":"blog/select-options-en-tu-webdynpro","excerpt":"SELECT-OPTIONS de las Dynpro ABAP son una forma muy sencilla de crear filtros complejos para realizar\nconsultas pero tambien se pueden usar en las WebDynpro. Aquí te explicamos como."}],"type":"list"}